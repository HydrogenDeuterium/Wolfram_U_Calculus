1
00:00:00,000 --> 00:00:03,000
Hello, and welcome to Lesson 38

2
00:00:03,000 --> 00:00:07,000
of this introduction to calculus with Wolfram U.

3
00:00:07,000 --> 00:00:12,000
The topic for this lesson is calculus and programming.

4
00:00:13,000 --> 00:00:15,000
Let’s begin with a brief overview of the lesson.

5
00:00:15,000 --> 00:00:18,000
The main point is that there are many problems in calculus

6
00:00:18,000 --> 00:00:22,000
where you have to do some operation multiple times—

7
00:00:22,000 --> 00:00:24,000
tens or hundreds of times—

8
00:00:24,000 --> 00:00:27,000
and a good example of that is Euler’s method.

9
00:00:27,000 --> 00:00:31,000
Now in Euler’s method, you have a recurrence relation.

10
00:00:31,000 --> 00:00:38,000
What that means is that you need to compute something step by step.

11
00:00:38,000 --> 00:00:40,000
For example, if you want to compute <i>y</i>[10],

12
00:00:40,000 --> 00:00:43,000
you need to work out <i>y</i>[9], <i>y</i>[8], et cetera,

13
00:00:43,000 --> 00:00:48,000
and to do this correctly by hand can be very, very tedious.

14
00:00:48,000 --> 00:00:51,000
You may have errors in your calculations,

15
00:00:51,000 --> 00:00:54,000
or it might just take a very long time.

16
00:00:54,000 --> 00:00:57,000
Of course what you can do is to set up a program

17
00:00:57,000 --> 00:01:01,000
which does that for you in the Wolfram Language.

18
00:01:01,000 --> 00:01:04,000
That’s the theme of this lesson.

19
00:01:04,000 --> 00:01:06,000
In this lesson, you’ll learn how to make

20
00:01:06,000 --> 00:01:10,000
your own programs within the Wolfram Language.

21
00:01:11,000 --> 00:01:14,000
We need some preliminaries over here.

22
00:01:14,000 --> 00:01:17,000
We need a few tools basically which will let us

23
00:01:17,000 --> 00:01:19,000
make programs in the Wolfram Language,

24
00:01:19,000 --> 00:01:25,000
and that’s just a list of functions which are useful in this context.

25
00:01:25,000 --> 00:01:32,000
You need the function If to control the flow of the program.

26
00:01:32,000 --> 00:01:36,000
You also need the simple semicolon character

27
00:01:36,000 --> 00:01:41,000
to stop an instruction and move on to another instruction.

28
00:01:42,000 --> 00:01:47,000
You need the function Print to put text on the screen

29
00:01:47,000 --> 00:01:52,000
and tell you what is happening inside the program,

30
00:01:52,000 --> 00:01:55,000
and that’s what is called debugging.

31
00:01:55,000 --> 00:02:00,000
Here’s an example of a function which is called ifexample

32
00:02:00,000 --> 00:02:04,000
which takes an input <i>a</i>, a number,

33
00:02:04,000 --> 00:02:10,000
and says if the number <i>a</i> is positive, print “positive”;

34
00:02:10,000 --> 00:02:14,000
otherwise, print “not positive”.

35
00:02:16,000 --> 00:02:18,000
If you apply it to the list over here,

36
00:02:18,000 --> 00:02:26,000
ifexample[10] should be positive, ifexample[0] should be not positive

37
00:02:26,000 --> 00:02:29,000
and ifexample[–4] should also be not positive.

38
00:02:29,000 --> 00:02:31,000
Here is the output,

39
00:02:31,000 --> 00:02:33,000
and you see that although you don’t get back anything—

40
00:02:33,000 --> 00:02:35,000
eventually you just get back Null—but on the way,

41
00:02:35,000 --> 00:02:37,000
you see the positive for the 10

42
00:02:37,000 --> 00:02:40,000
and the not positive for the remaining two.

43
00:02:40,000 --> 00:02:45,000
Now on the next note, if you, let’s say, say <i>a</i> = 5

44
00:02:45,000 --> 00:02:47,000
and you put a semicolon over here,

45
00:02:47,000 --> 00:02:49,000
that lets you move on to the next operation,

46
00:02:49,000 --> 00:02:52,000
which in this case is <i>a</i> + 6.

47
00:02:52,000 --> 00:02:56,000
So, <i>a</i> is 5, so of course <i>a</i> + 6 is just 11.

48
00:02:58,000 --> 00:03:00,000
A couple of things more.

49
00:03:00,000 --> 00:03:03,000
You can put comments in your program

50
00:03:03,000 --> 00:03:05,000
using this notation over here,

51
00:03:05,000 --> 00:03:08,000
and of course comments are very useful

52
00:03:08,000 --> 00:03:12,000
because they explain how your code works.

53
00:03:12,000 --> 00:03:16,000
Most code is very hard to read, and unless you have lots of comments,

54
00:03:16,000 --> 00:03:22,000
the reader will not be able to tell what’s happening inside the code.

55
00:03:22,000 --> 00:03:26,000
As an example, here I’ve set <i>c</i> equal to 4,

56
00:03:26,000 --> 00:03:30,000
then put a comment to say that we’re setting <i>c</i> equal to 4,

57
00:03:30,000 --> 00:03:33,000
and then it gives the value of <i>c</i>.

58
00:03:33,000 --> 00:03:37,000
Now another important function is the For function,

59
00:03:37,000 --> 00:03:39,000
which will let you do a task repeatedly

60
00:03:39,000 --> 00:03:41,000
like we require for the Euler method.

61
00:03:41,000 --> 00:03:46,000
Here’s a program that prints the numbers from 1 to 10.

62
00:03:46,000 --> 00:03:54,000
We start with <i>i</i> = 1 and you go all the way up to 10, not 11.

63
00:03:54,000 --> 00:03:58,000
You keep going as long as the number <i>i</i> is less than 11,

64
00:03:58,000 --> 00:04:06,000
and at every step, you increment <i>i</i> by 1 to go on to the next number.

65
00:04:06,000 --> 00:04:09,000
Then of course you print the number

66
00:04:09,000 --> 00:04:12,000
to say what’s happening inside the code.

67
00:04:12,000 --> 00:04:15,000
Here is the For loop,

68
00:04:15,000 --> 00:04:20,000
and you see it prints 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 and then stops.

69
00:04:21,000 --> 00:04:24,000
Okay. Just one more issue,

70
00:04:24,000 --> 00:04:28,000
and that’s the issue of global versus local variables.

71
00:04:29,000 --> 00:04:34,000
The variable over here <i>a</i> is a global variable in the sense that

72
00:04:34,000 --> 00:04:37,000
its value was set earlier to be 5.

73
00:04:38,000 --> 00:04:42,000
Now that can be a huge problem for you when you make a program.

74
00:04:42,000 --> 00:04:47,000
For example, you write a function <i>f</i>[<i>x</I>] which just does <i>x</i> + <i>a</i>.

75
00:04:47,000 --> 00:04:51,000
If you do <i>f</I>[2], you might think you’ll get back 2 + <i>a</i>,

76
00:04:51,000 --> 00:04:55,000
but instead you get back 7, and that’s because <i>a</i> is 5.

77
00:04:55,000 --> 00:04:59,000
What we need to do is to instead use local variables.

78
00:04:59,000 --> 00:05:02,000
Now you could use different variable names,

79
00:05:02,000 --> 00:05:03,000
but you might forget what they are,

80
00:05:03,000 --> 00:05:06,000
so the best way out is to use local variables.

81
00:05:06,000 --> 00:05:10,000
For example, over here you can use Module,

82
00:05:10,000 --> 00:05:15,000
and what Module does is it localizes the variable <i>a</i>.

83
00:05:15,000 --> 00:05:23,000
If I do <i>f</i>[2], then you get back 2 plus this strange kind of <i>a</i>, <i>a</i>$2415.

84
00:05:23,000 --> 00:05:26,000
Now that number might change from time to time,

85
00:05:26,000 --> 00:05:31,000
but basically that protects the <i>a</i> inside the function

86
00:05:31,000 --> 00:05:34,000
from being confused with the <i>a</i> which is global.

87
00:05:35,000 --> 00:05:38,000
This extra symbol over here indicates that

88
00:05:38,000 --> 00:05:41,000
it is a local variable or a Module variable.

89
00:05:42,000 --> 00:05:46,000
That’s all we need to define a function

90
00:05:46,000 --> 00:05:49,000
which implements Euler’s method.

91
00:05:49,000 --> 00:05:51,000
Recall that that was the one thing

92
00:05:51,000 --> 00:05:55,000
we could not quite discuss fully in differential equations.

93
00:05:55,000 --> 00:05:57,000
So here’s a function called eulermethod.

94
00:05:57,000 --> 00:05:59,000
Now I’m using lowercase

95
00:05:59,000 --> 00:06:03,000
because the Wolfram Language likes to reserve the uppercase letters

96
00:06:03,000 --> 00:06:05,000
for built-in functions.

97
00:06:05,000 --> 00:06:11,000
It takes the slope function, the starting point,

98
00:06:11,000 --> 00:06:16,000
the end point of the interval, the initial value for the function

99
00:06:16,000 --> 00:06:22,000
and the step size—how many steps you want to take as you go along.

100
00:06:22,000 --> 00:06:24,000
What you do now is you set up a Module,

101
00:06:24,000 --> 00:06:27,000
and the Module has some variables in it.

102
00:06:27,000 --> 00:06:29,000
The first variable is <i>m</i>,

103
00:06:29,000 --> 00:06:34,000
and what <i>m</i> is, is just the number of steps to be used.

104
00:06:34,000 --> 00:06:38,000
It’s the end minus the start over the step size.

105
00:06:39,000 --> 00:06:41,000
We also need the <i>x</i> values.

106
00:06:41,000 --> 00:06:47,000
That’s going to be the starting value plus the step size times <i>i</I>,

107
00:06:47,000 --> 00:06:51,000
where <i>i</i> will go from 0 to the number of steps.

108
00:06:52,000 --> 00:06:57,000
We also need the <i>y</i> values, and to do that,

109
00:06:57,000 --> 00:07:03,000
we first populate this table with the same constant initial value,

110
00:07:03,000 --> 00:07:07,000
and then we start off with the For loop.

111
00:07:07,000 --> 00:07:12,000
What the For loop does is it calculates each value of <i>y</i>

112
00:07:12,000 --> 00:07:18,000
based on the preceding value plus the step size times the slope.

113
00:07:20,000 --> 00:07:24,000
Then finally we gather all the <i>x</i> and <i>y</i> values

114
00:07:24,000 --> 00:07:28,000
and do this Transpose to make them look just right.

115
00:07:28,000 --> 00:07:33,000
That is Euler’s method from differential equations

116
00:07:33,000 --> 00:07:35,000
now done in the Wolfram Language.

117
00:07:35,000 --> 00:07:39,000
With this simple function, we can now try and do some calculations.

118
00:07:39,000 --> 00:07:45,000
Here is a differential equation, <i>y</i>' = <i>y</i> given <i>y</i>[0] = 1,

119
00:07:45,000 --> 00:07:48,000
and of course the solution for that is just <i>e</i>^<i>x</i>.

120
00:07:48,000 --> 00:07:50,000
The right-hand side is <i>y</i>.

121
00:07:50,000 --> 00:07:51,000
That’s your <i>f</i>.

122
00:07:51,000 --> 00:07:57,000
We apply the eulermethod to <i>f</i> starting at 0

123
00:07:57,000 --> 00:07:59,000
because that’s where you’re starting over here,

124
00:07:59,000 --> 00:08:02,000
and you want the value at 2, so that’s where you’ll stop.

125
00:08:03,000 --> 00:08:05,000
The initial value is 1.

126
00:08:05,000 --> 00:08:07,000
That’s the 1 over here.

127
00:08:07,000 --> 00:08:11,000
The 0.1 is going to be the step size.

128
00:08:12,000 --> 00:08:15,000
Okay. When you do that, then you see over here that

129
00:08:15,000 --> 00:08:20,000
you get back a list of values starting from the initial value

130
00:08:20,000 --> 00:08:25,000
and going all the way up to 2 in steps of 0.1.

131
00:08:25,000 --> 00:08:31,000
Now you see over here that the last value is 6.7275.

132
00:08:32,000 --> 00:08:37,000
The estimate over here is that the value of <i>y</i>[2] is 6.7275.

133
00:08:37,000 --> 00:08:42,000
Let’s compare that with <i>e</i>^2, and it looks like it’s reasonably good,

134
00:08:42,000 --> 00:08:44,000
but not very accurate.

135
00:08:44,000 --> 00:08:48,000
But that’s because we’re only at a step size of 0.1.

136
00:08:48,000 --> 00:08:50,000
Because you’re working on a computer,

137
00:08:50,000 --> 00:08:54,000
you can afford to make much smaller steps.

138
00:08:54,000 --> 00:08:57,000
You could say let the step size be 0.001,

139
00:08:57,000 --> 00:09:04,000
and then you get back a much smaller estimate for the error,

140
00:09:04,000 --> 00:09:06,000
which is 0.007.

141
00:09:06,000 --> 00:09:12,000
The point is that you can get better estimates for the values

142
00:09:12,000 --> 00:09:18,000
and much smaller errors simply by decreasing the step size.

143
00:09:18,000 --> 00:09:21,000
Of course because it’s all automatic, it doesn’t matter.

144
00:09:21,000 --> 00:09:26,000
You can go quite a long way to get more and more accurate results.

145
00:09:27,000 --> 00:09:30,000
Okay. That brings me to the end of the lesson,

146
00:09:30,000 --> 00:09:32,000
and the main point is that

147
00:09:32,000 --> 00:09:35,000
the Wolfram Language is great for making programs.

148
00:09:35,000 --> 00:09:38,000
In fact, what you’ve done in this course

149
00:09:38,000 --> 00:09:41,000
is to learn many parts of the Wolfram Language

150
00:09:41,000 --> 00:09:45,000
in the context of calculus, and that’s a great thing to know.

151
00:09:45,000 --> 00:09:49,000
Programming is a big plus in this age.

152
00:09:50,000 --> 00:09:56,000
Now to program, you need functions like If, For, Print and Module.

153
00:09:57,000 --> 00:10:01,000
Do not forget—try and put as many comments as you can

154
00:10:01,000 --> 00:10:03,000
because they are crucial for understanding

155
00:10:03,000 --> 00:10:07,000
what you are trying to do, both for yourself and for others.

156
00:10:08,000 --> 00:10:10,000
Try to avoid global variables.

157
00:10:10,000 --> 00:10:13,000
Try and use local variables to avoid confusion,

158
00:10:13,000 --> 00:10:16,000
and you can do that with Module.

159
00:10:16,000 --> 00:10:19,000
We saw that we can program Euler’s method,

160
00:10:19,000 --> 00:10:22,000
but of course you can program other calculus operations,

161
00:10:22,000 --> 00:10:25,000
like finding maxima and minima, using the Wolfram Language.

162
00:10:25,000 --> 00:10:28,000
To program yourself means that you actually become

163
00:10:28,000 --> 00:10:31,000
some kind of an expert on the Wolfram Language

164
00:10:31,000 --> 00:10:35,000
because those programs can be quite hard to write.

165
00:10:35,000 --> 00:10:39,000
That’s the end of this lesson on calculus and programming.

166
00:10:39,000 --> 00:10:43,000
We’re really done with the course content.

167
00:10:43,000 --> 00:10:47,000
In the next lesson, we’ll talk about a sample calculus exam,

168
00:10:47,000 --> 00:10:49,000
the first part of the exam, but until then,

169
00:10:49,000 --> 00:10:54,000
do review this lesson and be prepared to take on an exam.

170
00:10:54,000 --> 00:10:56,000
Thank you very much. I’ll stop over here.

